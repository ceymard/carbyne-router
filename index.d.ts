// Generated by dts-bundle v0.5.0
// Dependencies for this module:
//   ../carbyne

declare module 'carbyne-router' {
    export { Router } from 'carbyne-router/router';
    export { View } from 'carbyne-router/view';
    export { State, StateDefinition, StateParams } from 'carbyne-router/state';
}

declare module 'carbyne-router/router' {
    import { Eventable, Observable, Atom } from 'carbyne';
    import { StateDefinition, State, StateParams, ActiveStates } from 'carbyne-router/state';
    export class RedirectError extends Error {
            params: StateParams;
            name: string;
    }
    /**
        * A router that can link to window.location.
        */
    export class Router extends Eventable {
            o_state: Observable<State>;
            o_active_states: Observable<ActiveStates>;
            current_state_def: StateDefinition;
            constructor();
            default(name: string, params?: StateParams): this;
            redirect(name: string, params?: StateParams): void;
            /**
                * Create a new state for our router.
                * @param {String} name The name of the state.
                * @param {object} desc The full description of the state.
                */
            state(name: string, url: string, fn: typeof State): this;
            virtualState(name: string, url: string, fn: typeof State): this;
            /**
                * Set the URL of the router by finding its matching state
                * and activating it.
                * If none match, go the the 'default' state if it exists.
                * Otherwise, triggers an error.
                *
                * @param {string} url: The url we want to go to.
                */
            setUrl(url: string): Promise<State>;
            /**
                * [go description]
                * @param  {[type]} state_name [description]
                * @param  {[type]} params     [description]
                * @return {Promise} A promise that tells when the state has been fully activated.
                */
            go(state_name: string, params?: StateParams): Promise<State>;
            /**
                * Perform the activation of the new state.
                * If the activation raised an error, triggers the 'reject' event.
                */
            _activate(def: StateDefinition, params: StateParams): Promise<State>;
            /**
                * [linkWithLocation description]
                */
            linkWithLocation(): void;
            /**
                * A decorator that sets up the href
                */
            href(name: string, params?: StateParams): (a: Atom) => Atom;
    }
}

declare module 'carbyne-router/view' {
    import { VirtualAtom, Controller, BasicAttributes, Appendable } from 'carbyne';
    import { Router } from 'carbyne-router/router';
    export class ViewAtom extends VirtualAtom {
        constructor(name: string);
    }
    export class ViewController extends Controller {
        name: string;
        router: Router;
        constructor(name: string);
        onMount(): void;
        link(): void;
        setContent(c: Appendable): void;
        setRouter(router: Router): void;
    }
    export interface ViewAttributes extends BasicAttributes {
        name: string;
        router?: Router;
    }
    /**
      * A view is a virtual node.
      */
    export function View(attrs: ViewAttributes, children?: any[]): ViewAtom;
}

declare module 'carbyne-router/state' {
    import { Eventable, Observable, Observer } from 'carbyne';
    import { Router } from 'carbyne-router/router';
    export interface StateParams {
            [name: string]: any;
    }
    export interface ActiveStates {
            params: StateParams;
            current_state: State;
            states: {
                    [state_name: string]: State;
            };
    }
    /**
        *
        */
    export class State extends Eventable {
            name: string;
            parent: State;
            params: StateParams;
            protected _router: Router;
            constructor(name: string, router: Router);
            __init__(...args: any[]): Promise<any> | void;
            observe<T>(obs: Observable<T>, cbk: Observer<T>): void;
            /**
                * Go to the given state of the current router.
                * Also, pre-fills the asked params.
                */
            go(state_name: string, params?: StateParams): void;
            destroy(): void;
    }
    /**
        * A single state, able to tell if it matches an url.
        */
    export class StateDefinition {
            is_active: Observable<boolean>;
            name: string;
            url_part: string;
            param_names: Array<string>;
            regexp: RegExp;
            virtual: boolean;
            parent: StateDefinition;
            router: Router;
            constructor(name: string, url: string, kls: typeof State, parent: StateDefinition, router: Router);
            deactivate(): void;
            build(): void;
            getUrl(params?: StateParams): string;
            match(url: string): StateParams;
            isParent(state: StateDefinition): boolean;
            /**
                * Compare the previous parameters and the new ones, relative
                * to the param_names of this state (other names won't be checked
                * for changes).
                *
                * Note: the difference is checked using strict equality.
                *
                * @param  {Object} prev_params ...
                * @param  {Object} new_params  ...
                * @return {boolean}
                */
            _sameParams(prev_params: StateParams, new_params: StateParams): boolean;
            /**
                * NOTE This function should return a promise instead of doing it
                * 			all inline.
                * @param  {Object} state The state object to activate.
                */
            activate(params: StateParams, previous: ActiveStates): Promise<ActiveStates>;
    }
}

